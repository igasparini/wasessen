[{"type": "system", "data": {"content": "Act as an expert software developer.\nAlways use best practices when coding.\nWhen you edit or add code, respect and use existing conventions, libraries, etc.\n\nTake requests for changes to the supplied code, and then you MUST\n1. (planning) Think step-by-step and explain the needed changes. Don't include *edit blocks* in this part of your response, only describe code changes.\n2. (output) Describe each change with an *edit block* per the example below.\n\nYou MUST format EVERY code change with an *edit block* like this:\n```python\nsome/dir/example.py\n<<<<<<< HEAD\n    # some comment\n    # Func to multiply\n    def mul(a,b)\n=======\n    # updated comment\n    # Function to add\n    def add(a,b):\n>>>>>>> updated\n```\nRemember, you can use multiple *edit blocks* per file.\n\nHere is an example reponse:\n---\nPLANNING:\nWe need to change ... because ..., therefore I will add the line `a=a+1` to the function `add_one`.\nAlso, in the class `DB`, we need to update the ...\n\nOUTPUT:\n```python\nsome/dir/example_1.py\n<<<<<<< HEAD\n    def mul(a,b)\n=======\n    def add(a,b):\n>>>>>>> updated\n```\n\n```python\nsome/dir/example_1.py\n<<<<<<< HEAD\n    def add_one(a,b):\n        a = a+2\n=======\n    def add_one(a,b):\n        a = a+1\n>>>>>>> updated\n```\n\n```python\nsome/dir/example_2.py\n<<<<<<< HEAD\n    class DBS:\n        db = 'aaa'\n=======\n    class DBS:\n        db = 'bbb'\n>>>>>>> updated\n```\n---\n\nA program will parse the edit blocks you generate and replace the `HEAD` lines with the `updated` lines.\nSo edit blocks must be precise and unambiguous!\n\nEvery *edit block* must be fenced with ```...``` with the correct code language.\n\nThe `HEAD` section must be an *exact set of sequential lines* from the file! This is very important. Otherwise the parser won't work.\nNEVER SKIP LINES in the `HEAD` section!\nNEVER ELIDE LINES AND REPLACE THEM WITH A COMMENT!\nNEVER OMIT ANY WHITESPACE in the `HEAD` section!\n\nEdits to different parts of a file each need their own *edit block*.\n\nIf you want to put code in a new file, use an edit block with:\n- A new file path, including dir name if needed\n- An empty `HEAD` section\n- The new file's contents in the `updated` section\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "\n    frontend/svelte.config.js\n    ```\n    import adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter(),\n\t}\n};\n\nexport default config;\n\n    ```\n    ", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "human", "data": {"content": "Request: I have a problem after running npm run dev:\n\n(wasessen) ivogasparini@Ivos-MacBook-Pro frontend % npm run dev\n\n> wasessen@1.0.0 dev\n> vite dev\n\n\nNo routes found. If you are using a custom src/routes directory, make sure it is specified in svelte.config.js\nForced re-optimization of dependencies\n\n  VITE v4.5.1  ready in 241 ms\n\n  \u279c  Local:   http://localhost:5173/\n  \u279c  Network: use --host to expose\n  \u279c  press h to show help\nNo routes found. If you are using a custom src/routes directory, make sure it is specified in svelte.config.js\n\nHelp me debug. It isn't finding files in src/routes, but they are there.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "ai", "data": {"content": "PLANNING:\nThe error message suggests that the Svelte application is not able to find the routes. This could be due to the `svelte.config.js` not being properly configured to point to the `src/routes` directory. We need to add the `files` property to the `kit` object in the `svelte.config.js` file and set it to an object with a `routes` property pointing to the `src/routes` directory.\n\nOUTPUT:\n```javascript\nfrontend/svelte.config.js\n<<<<<<< HEAD\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter(),\n\t}\n};\n\nexport default config;\n=======\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter(),\n\t\tfiles: {\n\t\t\troutes: 'src/routes',\n\t\t},\n\t}\n};\n\nexport default config;\n>>>>>>> updated\n```", "additional_kwargs": {}, "type": "ai", "example": false}}]